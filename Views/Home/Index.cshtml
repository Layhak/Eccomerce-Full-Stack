@model IEnumerable<Eccomerce_Full_Stack.Models.Product>

@{
    ViewData["Title"] = "Home Page";
    Layout = "_FrontendLayout";
}

<div x-data="cart()" x-init="loadCart()" class="mx-auto max-w-2xl px-4 py-16 sm:px-6 sm:py-24 lg:max-w-7xl lg:px-8">
    <h2 class="text-xl font-bold text-gray-900">Customers also bought</h2>
    <div class="mt-8 grid grid-cols-1 gap-y-12 sm:grid-cols-2 sm:gap-x-6 lg:grid-cols-4 xl:gap-x-8">
        @foreach (var item in Model)
        {
        <div>
            <div class="relative">
                <div class="relative h-72 w-full overflow-hidden rounded-lg">
                    <span class="absolute right-4 top-3 z-20 h-[54px] w-[54px] rounded-xl bg-gradient-to-tr from-pink-500 to-yellow-500 p-1 text-center text-[14px] font-medium text-white">
                        BUY 1 GET 1
                    </span>
                    <img src="uploads/@Html.DisplayFor(modelItem => item.Image)"
                         alt="Product image"
                         class="h-full w-full object-contain object-center">
                </div>

                <div class="relative mt-2">
                    <h3 class="text-sm font-medium text-gray-900">@Html.DisplayFor(modelItem => item.ProductName)</h3>
                    <p class="mt-1 text-sm text-gray-500">@Html.DisplayFor(modelItem => item.Description)</p>
                    <span class="inline-flex items-center gap-x-1.5 rounded-full bg-gray-100 px-1.5 py-0.5 text-xs font-medium text-gray-600">
                        <svg class="h-1.5 w-1.5 fill-gray-400" viewBox="0 0 6 6" aria-hidden="true">
                            <circle cx="3" cy="3" r="3"></circle>
                        </svg>
                        @Html.DisplayFor(modelItem => item.Category.CategoryName)
                    </span>
                </div>
                <div class="absolute inset-x-0 top-0 flex h-72 items-end justify-end overflow-hidden rounded-lg p-4">
                    <div aria-hidden="true"
                         class="absolute inset-x-0 bottom-0 h-36 bg-gradient-to-t from-black opacity-50"></div>
                    <p class="relative text-lg font-semibold text-white">$@Html.DisplayFor(modelItem => item.Price)</p>
                </div>
            </div>
            <div class="mt-6">
                <button @@click="addToCart({ id: '@item.ProductId', name: '@item.ProductName', price: '@item.Price',image: '@item.Image' })"
                        class="relative flex items-center justify-center rounded-md border border-transparent bg-gray-100 px-8 py-2 text-sm font-medium text-gray-900 hover:bg-gray-200">
                    Add to bag
                </button>
            </div>
        </div>
        }
    </div>
</div>

<script>
    function cart() {
        return {
            cartItems: [],
            addToCart(product) {
                let existingProduct = this.cartItems.find(item => item.id === product.id);
                if (existingProduct) {
                    existingProduct.quantity++;
                } else {
                    this.cartItems.push({ ...product, quantity: 1 });
                }
                localStorage.setItem('cart', JSON.stringify(this.cartItems));
                this.updateCartCount();
            },
            loadCart() {
                this.cartItems = JSON.parse(localStorage.getItem('cart')) || [];
                this.updateCartCount();
            },
            updateCartCount() {
                // Update the cart count to show the number of distinct products
                const distinctProductCount = this.cartItems.length;
                document.getElementById('cart-count').innerText = distinctProductCount;
            }
        }
    }
</script>

